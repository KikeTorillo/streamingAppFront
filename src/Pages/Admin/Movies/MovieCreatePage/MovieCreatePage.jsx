// ===== MOVIE CREATE PAGE - VERSI√ìN CORREGIDA CON TMDB FUNCIONANDO =====
// src/Pages/Admin/Movies/MovieCreatePage/MovieCreatePage.jsx

import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';

// ===== LAYOUTS Y COMPONENTES =====
import { AdminLayout } from '../../../../components/templates/AdminLayout/AdminLayout';
import { Container } from '../../../../components/atoms/Container/Container';
import { Button } from '../../../../components/atoms/Button/Button';

// ===== COMPONENTES ESPEC√çFICOS =====
import { TMDBSearchView } from '../../../../components/organism/TMDBSearchView/TMDBSearchView';
import { MovieFormView } from './components/MovieFormView';
import { TranscodingModal } from '../../../../components/molecules/TranscodingModal/TranscodingModal';

// ===== SERVICIOS Y HOOKS =====
import { createMovieService } from '../../../../services/Movies/createMovieService';
import { createSeriesService } from '../../../../services/Series/createSeriesService';
import { getCategoriesService } from '../../../../services/Categories/getCategoriesService';
import { useUploadProgress } from '../../../../hooks/useUploadProgress';

// ===== ESTILOS =====
import './MovieCreatePage.css';

/**
 * MovieCreatePage - VERSI√ìN CORREGIDA CON TMDB FUNCIONANDO
 * ‚úÖ CORREGIDO: TMDBSearchView maneja su propia b√∫squeda
 * ‚úÖ CORREGIDO: Carga de categor√≠as funcional
 * ‚úÖ CORREGIDO: Separaci√≥n clara de responsabilidades
 */
function MovieCreatePage() {
  const navigate = useNavigate();

  // ===== ESTADOS PRINCIPALES =====
  const [currentView, setCurrentView] = useState('search'); // 'search' | 'form'
  const [selectedItem, setSelectedItem] = useState(null);
  const [categories, setCategories] = useState([]);
  const [success, setSuccess] = useState(false);
  const [hasChanges, setHasChanges] = useState(false);

  // ===== ESTADOS DE FORMULARIO =====
  const [formLoading, setFormLoading] = useState(false);
  const [categoriesLoading, setCategoriesLoading] = useState(false);
  const [categoriesError, setCategoriesError] = useState(null);
  const [error, setError] = useState(null);

  // ===== HOOK DE PROGRESO =====
  const {
    isTranscoding,
    progress,
    status,
    message,
    error: progressError,
    contentInfo,
    startProgress,
    stopProgress,
    clearProgress
  } = useUploadProgress();

  // ===== EFECTOS =====
  useEffect(() => {
    loadCategories();
  }, []);

  // ===== DEBUG: Estado de categor√≠as =====
  useEffect(() => {
    console.log('üé¨ MovieCreatePage - Estado de categor√≠as:', {
      loading: categoriesLoading,
      error: categoriesError,
      count: categories.length,
      categories: categories.slice(0, 3) // Solo las primeras 3 para debug
    });
  }, [categoriesLoading, categoriesError, categories]);

  // ===== FUNCIONES DE CARGA INICIAL - CORREGIDAS =====

  /**
   * ‚úÖ FUNCI√ìN COMPLETAMENTE CORREGIDA: loadCategories
   * Maneja correctamente la respuesta directa del servicio
   */
  const loadCategories = async () => {
    try {
      setCategoriesLoading(true);
      setCategoriesError(null);

      console.log('üìã Cargando categor√≠as desde el servicio...');

      // ‚úÖ CORRECCI√ìN: El servicio getCategoriesService() devuelve directamente un array
      const response = await getCategoriesService();
      console.log('üìã Respuesta cruda del servicio:', response);

      // ‚úÖ NORMALIZAR: Asegurar que tenemos un array v√°lido
      let categoriesArray = [];

      if (Array.isArray(response)) {
        categoriesArray = response;
      } else if (response && Array.isArray(response.data)) {
        categoriesArray = response.data;
      } else if (response && response.categories && Array.isArray(response.categories)) {
        categoriesArray = response.categories;
      } else {
        console.warn('‚ö†Ô∏è Respuesta inesperada del servicio:', response);
        categoriesArray = [];
      }

      // Validar datos
      if (categoriesArray.length === 0) {
        console.warn('‚ö†Ô∏è No hay categor√≠as disponibles');
        setCategoriesError('No hay categor√≠as disponibles. Ve a Administrar > Categor√≠as para crear al menos una.');
        setCategories([]);
        return;
      }

      // ‚úÖ MAPEAR: Asegurar estructura consistente
      const normalizedCategories = categoriesArray
        .filter(cat => cat && cat.id && cat.name) // Filtrar categor√≠as v√°lidas
        .map(cat => ({
          id: Number(cat.id), // Asegurar que sea n√∫mero
          name: String(cat.name).trim() // Asegurar que sea string limpio
        }));

      if (normalizedCategories.length === 0) {
        setCategoriesError('Las categor√≠as disponibles no tienen el formato correcto.');
        setCategories([]);
        return;
      }

      console.log('‚úÖ Categor√≠as normalizadas:', normalizedCategories);
      setCategories(normalizedCategories);

    } catch (err) {
      console.error('‚ùå Error al cargar categor√≠as:', err);

      // ‚úÖ MANEJO DE ERRORES ESPEC√çFICOS
      let errorMessage = 'Error desconocido al cargar categor√≠as';

      if (err.response?.status === 401) {
        errorMessage = 'Sesi√≥n expirada. Inicia sesi√≥n nuevamente.';
      } else if (err.response?.status === 403) {
        errorMessage = 'No tienes permisos para ver las categor√≠as.';
      } else if (err.response?.status === 404) {
        errorMessage = 'Servicio de categor√≠as no encontrado.';
      } else if (err.response?.status >= 500) {
        errorMessage = 'Error del servidor. Intenta m√°s tarde.';
      } else if (err.message) {
        errorMessage = err.message;
      }

      setCategoriesError(errorMessage);

      // ‚úÖ FALLBACK: Categor√≠as de ejemplo para desarrollo
      console.log('üîß Aplicando fallback de categor√≠as para desarrollo');
      setCategories([
        { id: 1, name: 'General' },
        { id: 2, name: 'Acci√≥n' },
        { id: 3, name: 'Drama' },
        { id: 4, name: 'Comedia' },
        { id: 5, name: 'Terror' }
      ]);

    } finally {
      setCategoriesLoading(false);
    }
  };

  // ===== FUNCIONES DE NAVEGACI√ìN - SIMPLIFICADAS =====

  /**
   * ‚úÖ SIMPLIFICADO: Seleccionar item de TMDB y ir al formulario
   * TMDBSearchView maneja su propia b√∫squeda, nosotros solo recibimos el resultado
   */
  const handleItemSelect = (item) => {
    console.log('üéØ Item seleccionado de TMDB:', item);
    setSelectedItem(item);
    setCurrentView('form');
    setHasChanges(false);
  };

  /**
   * Volver a la b√∫squeda desde el formulario
   */
  const handleBackToSearch = () => {
    if (hasChanges && !success) {
      const confirmed = window.confirm(
        '¬øEst√°s seguro de que quieres volver? Los cambios no guardados se perder√°n.'
      );
      if (!confirmed) return;
    }

    setCurrentView('search');
    setSelectedItem(null);
    setHasChanges(false);
    setSuccess(false);
    setError(null);
  };

  /**
   * ‚úÖ SIMPLIFICADO: Crear contenido directamente sin TMDB
   */
  const handleCreateDirect = () => {
    console.log('‚úèÔ∏è Creaci√≥n directa sin TMDB');
    setSelectedItem(null);
    setCurrentView('form');
    setHasChanges(false);
  };

  // ===== FUNCIONES DEL FORMULARIO - CORREGIDAS =====

  /**
   * ‚úÖ CORREGIDO: Genera campos del formulario con categor√≠as funcionando
   */
  const generateFormFields = (item) => {
    return [
      {
        name: 'title',
        type: 'text',
        label: 'T√≠tulo',
        placeholder: 'T√≠tulo de la pel√≠cula o serie',
        required: true,
        maxLength: 255
      },
      {
        name: 'original_title',
        type: 'text',
        label: 'T√≠tulo Original',
        placeholder: 'T√≠tulo en idioma original',
        maxLength: 255
      },
      {
        name: 'description',
        type: 'textarea',
        label: 'Descripci√≥n',
        placeholder: 'Sinopsis o descripci√≥n del contenido',
        required: true,
        rows: 4,
        maxLength: 1000
      },
      {
        name: 'year',
        type: 'number',
        label: 'A√±o de Lanzamiento',
        placeholder: '2024',
        required: true,
        min: 1900,
        max: new Date().getFullYear() + 5
      },
      {
        name: 'duration',
        type: 'number',
        label: selectedItem?.type === 'tv' ? 'Episodios' : 'Duraci√≥n (min)',
        placeholder: selectedItem?.type === 'tv' ? '10' : '120',
        required: true,
        min: 1
      },
      {
        name: 'category_id',
        type: 'select',
        label: 'Categor√≠a *',
        options: categories.map(cat => ({
          value: cat.id,
          label: cat.name
        })),
        required: true,
        loading: categoriesLoading,
        disabled: categoriesLoading || categories.length === 0,
        helperText: (() => {
          if (categoriesLoading) return '‚è≥ Cargando categor√≠as disponibles...';
          if (categoriesError) return `‚ùå ${categoriesError}`;
          if (categories.length === 0) return '‚ö†Ô∏è No hay categor√≠as. Ve a Administrar > Categor√≠as para crear una.';
          return `üìã Selecciona la categor√≠a principal (${categories.length} disponibles)`;
        })(),
        placeholder: categoriesLoading ? 'Cargando categor√≠as...' : 'Selecciona una categor√≠a',
        defaultValue: categories.length > 0 ? categories[0].id : undefined
      },
      {
        name: 'rating',
        type: 'number',
        label: 'Calificaci√≥n',
        placeholder: '8.5',
        min: 0,
        max: 10,
        step: 0.1,
        helperText: 'Calificaci√≥n promedio (0-10)'
      },
      {
        name: 'poster_url',
        type: 'text',
        label: 'URL del Poster',
        placeholder: 'https://...',
        helperText: 'URL de la imagen de portada'
      },
      {
        name: 'video_file',
        type: 'file',
        label: 'Archivo de Video',
        accept: 'video/*',
        required: true,
        helperText: 'Archivo de video a subir (formatos soportados: mp4, avi, mkv)'
      }
    ];
  };

  /**
   * ‚úÖ CORREGIDO: Genera datos iniciales del formulario con valores por defecto
   */
  const generateInitialFormData = (item) => {
    const baseData = {
      title: '',
      original_title: '',
      description: '',
      year: new Date().getFullYear(),
      duration: 120,
      rating: 0,
      poster_url: '',
      category_id: categories.length > 0 ? categories[0].id : '',
      tmdb_id: null,
      media_type: 'movie'
    };

    // Si hay un item de TMDB, llenar con sus datos
    if (item) {
      return {
        ...baseData,
        title: item.title || item.name || baseData.title,
        original_title: item.original_title || item.original_name || baseData.original_title,
        description: item.overview || baseData.description,
        year: item.year || (item.release_date ? new Date(item.release_date).getFullYear() :
          item.first_air_date ? new Date(item.first_air_date).getFullYear() : baseData.year),
        duration: item.type === 'tv' || item.media_type === 'tv' ? 1 : 120,
        rating: item.vote_average || item.rating || baseData.rating,
        poster_url: item.poster_path ? `https://image.tmdb.org/t/p/w500${item.poster_path}` :
          item.poster ? (item.poster.startsWith('http') ? item.poster : `https://image.tmdb.org/t/p/w500${item.poster}`) :
            baseData.poster_url,
        tmdb_id: item.id || item.tmdb_id,
        media_type: item.media_type || item.type || 'movie'
      };
    }

    return baseData;
  };

  /**
   * Maneja el env√≠o del formulario
   */
  const handleFormSubmit = async (formData) => {
    try {
      setFormLoading(true);
      setError(null);

      console.log('üìã Enviando formulario:', formData);

      // Iniciar seguimiento de progreso
      startProgress({
        title: formData.title,
        type: formData.media_type || 'movie'
      });

      // Preparar datos para el servicio
      const serviceData = {
        ...formData,
        type: formData.media_type || 'movie'
      };

      // Llamar al servicio apropiado
      const response = serviceData.type === 'tv' ?
        await createSeriesService(serviceData) :
        await createMovieService(serviceData);

      console.log('‚úÖ Respuesta del servicio:', response);

      // Mostrar √©xito
      setSuccess(true);
      setHasChanges(false);

      // Redirigir despu√©s de un breve delay
      setTimeout(() => {
        navigate('/admin/movies');
      }, 2000);

    } catch (err) {
      console.error('‚ùå Error al crear contenido:', err);
      setError(`Error al crear el contenido: ${err.message}`);
      stopProgress();
    } finally {
      setFormLoading(false);
    }
  };

  /**
   * Maneja cambios en el formulario
   */
  const handleFormChange = (formData) => {
    setHasChanges(true);
  };

  // ===== VALIDACI√ìN UI =====

  /**
   * ‚úÖ VALIDACI√ìN: No mostrar formulario si no hay categor√≠as cargadas
   */
  const canShowForm = !categoriesLoading && categories.length > 0;

  // ===== RENDER =====

  return (
    <AdminLayout
      title={currentView === 'search' ? 'Agregar Contenido' : 'Configurar Contenido'}
      subtitle={currentView === 'search' ?
        'Busca en TMDB o crea contenido manualmente' :
        'Completa la informaci√≥n del contenido'
      }
    >
      <Container
        size="full"
        className={`${formLoading ? 'movie-create--loading' : ''}`}
      >

        {/* ===== VISTA DE B√öSQUEDA TMDB - SIMPLIFICADA ===== */}
        {currentView === 'search' && (
          <TMDBSearchView
            // ‚úÖ SIMPLIFICADO: Solo handlers esenciales
            onSelectItem={handleItemSelect}
            onManualCreate={handleCreateDirect}

            // Configuraci√≥n b√°sica
            contentType="all"
            title="üé¨ Buscar en TMDB"
            description="Busca pel√≠culas y series en la base de datos de TMDB para agregar al cat√°logo"
            placeholder="Ej: Avatar, Breaking Bad, Inception..."
            helperText="Busca por t√≠tulo, a√±o o palabras clave"
            showManualCreate={true}
          />
        )}

        {/* ===== VISTA DE FORMULARIO ===== */}
        {currentView === 'form' && (
          <>
            {!canShowForm ? (
              <Container size="md">
                <div style={{
                  textAlign: 'center',
                  padding: 'var(--space-xl)',
                  background: 'var(--bg-secondary)',
                  borderRadius: 'var(--radius-lg)',
                  border: '1px solid var(--border-default)'
                }}>
                  {categoriesLoading ? (
                    <>
                      <h3>‚è≥ Cargando configuraci√≥n...</h3>
                      <p>Obteniendo categor√≠as disponibles...</p>
                    </>
                  ) : (
                    <>
                      <h3>‚ö†Ô∏è Configuraci√≥n requerida</h3>
                      <p>No hay categor√≠as disponibles para clasificar el contenido.</p>
                      <Button
                        variant="primary"
                        onClick={() => navigate('/admin/categories/create')}
                        leftIcon="‚ûï"
                      >
                        Crear Primera Categor√≠a
                      </Button>
                      <br />
                      <Button
                        variant="outline"
                        onClick={() => setCurrentView('search')}
                        style={{ marginTop: 'var(--space-md)' }}
                      >
                        Volver a B√∫squeda
                      </Button>
                    </>
                  )}
                </div>
              </Container>
            ) : (
              <MovieFormView
                selectedItem={selectedItem}
                formFields={generateFormFields(selectedItem)}
                initialFormData={generateInitialFormData(selectedItem)}
                formLoading={formLoading}
                success={success}
                hasChanges={hasChanges}
                onSubmit={handleFormSubmit}
                onChange={handleFormChange}
                onBackToSearch={handleBackToSearch}
                categoryOptions={categories}
                showBackButton={true}
                categoriesLoading={categoriesLoading}
              />
            )}
          </>
        )}

        {/* ===== MODAL DE PROGRESO ===== */}
        {isTranscoding && (
          <TranscodingModal
            isOpen={isTranscoding}
            progress={progress}
            status={status}
            message={message}
            error={progressError}
            contentInfo={contentInfo}
            onClose={() => {
              stopProgress();
              clearProgress();
            }}
          />
        )}

      </Container>
    </AdminLayout>
  );
}

export { MovieCreatePage };