// molecules/TextSelect/TextSelect.stories.jsx
import React, { useState } from 'react';
import { TextSelect } from './TextSelect';
import './TextSelect.css';

export default {
  title: 'Components/Molecules/TextSelect',
  component: TextSelect,
  tags: ['autodocs'],
  parameters: {
    docs: {
      description: {
        component: `
# TextSelect Component

Campo de selecci√≥n avanzado que **extiende el √°tomo Select** siguiendo principios de **Atomic Design**. 
Mantiene total consistencia con TextInput y a√±ade funcionalidades como etiquetas, iconos, validaci√≥n y mensajes de ayuda.

## üéØ Caracter√≠sticas principales

- **Basado en Select mejorado**: Reutiliza TODAS las mejoras del √°tomo (variantes sem√°nticas, border radius, responsive, etc.)
- **4 variantes visuales**: Default, Success, Warning, Error
- **5 tama√±os responsive**: XS, SM, MD, LG, XL (heredados del √°tomo)
- **Estados completos**: Normal, Focus, Hover, Disabled (heredados del √°tomo)
- **Iconos izquierdos**: Emojis, clases CSS, componentes React con click handlers
- **Validaci√≥n avanzada**: Mensajes de error, ayuda, live regions
- **Accesibilidad completa**: ARIA attributes, labels asociados, navegaci√≥n por teclado
- **Theming autom√°tico**: Variables CSS del sistema, modo oscuro nativo
- **Mobile-first**: √Årea t√°ctil de 44px, optimizaci√≥n iOS

## üèóÔ∏è Arquitectura Atomic Design

\`\`\`
TextSelect (Mol√©cula) üß¨
‚îú‚îÄ‚îÄ Label (elemento din√°mico)
‚îú‚îÄ‚îÄ Container
‚îÇ   ‚îú‚îÄ‚îÄ LeftIcon (elemento + clickeable)
‚îÇ   ‚îú‚îÄ‚îÄ Select (√Åtomo mejorado) ‚öõÔ∏è ‚Üê Reutiliza todas las mejoras
‚îÇ   ‚îî‚îÄ‚îÄ Arrow (icono integrado del √°tomo)
‚îî‚îÄ‚îÄ Footer
    ‚îî‚îÄ‚îÄ Messages (helper/error con live regions)
\`\`\`

## üì± Sistema de dise√±o

Optimizado para sistemas con \`html { font-size: 62.5% }\` donde \`1rem = 10px\`
Usa autom√°ticamente TODAS las variables CSS del sistema de dise√±o actualizado.

## üîß Uso b√°sico

\`\`\`jsx
import { TextSelect } from './molecules/TextSelect';

const countries = [
  { value: 'mx', label: 'M√©xico' },
  { value: 'us', label: 'Estados Unidos' },
  { value: 'ca', label: 'Canad√°' },
  { value: 'es', label: 'Espa√±a', disabled: true }
];

// Uso simple (hereda TODAS las mejoras del √°tomo Select)
<TextSelect 
  options={countries}
  placeholder="Selecciona tu pa√≠s"
  onChange={handleChange}
/>

// Con variantes sem√°nticas del √°tomo
<TextSelect 
  options={countries}
  variant="success"
  rounded="lg"
  placeholder="Pa√≠s seleccionado"
/>

// Campo completo con todas las funcionalidades
<TextSelect 
  label="Pa√≠s de residencia"
  options={countries}
  value={selectedCountry}
  onChange={handleCountryChange}
  required
  errorText={countryError}
  helperText="Selecciona tu pa√≠s para personalizar la experiencia"
  leftIcon="üåç"
  onLeftIconClick={openCountryModal}
  variant="success"
  rounded="xl"
  size="lg"
/>
\`\`\`

## üé® Variables CSS del sistema

El componente usa autom√°ticamente las mismas variables que el √°tomo Select y TextInput:

\`\`\`css
:root {
  /* Variables heredadas del sistema completo */
  --text-primary: #111827;
  --text-muted: #6b7280;
  --bg-primary: #ffffff;
  --border-default: #d1d5db;
  --border-focus: #3b82f6;
  --color-danger: #ef4444;
  --color-success: #22c55e;
  --color-warning: #f59e0b;
  --color-danger-light: #fef2f2;
  --color-success-light: #f0fdf4;
  --color-warning-light: #fefce8;
  /* Y todas las dem√°s del sistema... */
}
\`\`\`

## üéØ Caracter√≠sticas del componente

**Como mol√©cula en Atomic Design:**
- **Hereda del √°tomo Select**: Variantes sem√°nticas (error, success, warning), border radius personalizable, responsive con √°rea t√°ctil, validaci√≥n HTML5, modo oscuro autom√°tico
- **A√±ade funcionalidades de mol√©cula**: Label din√°mico que cambia color seg√∫n estado, iconos izquierdos interactivos, mensajes con live regions

**Casos de uso ideales:**
- Formularios complejos que requieren validaci√≥n visual
- Campos con iconos informativos (categor√≠a, pa√≠s, tipo)
- Interfaces que necesitan feedback inmediato al usuario
- Aplicaciones con modo oscuro autom√°tico

## ‚ôø Accesibilidad mejorada

- **ARIA live regions**: Mensajes de error anunciados autom√°ticamente
- **Labels din√°micos**: Cambian color seg√∫n estado/foco
- **Iconos accesibles**: \`aria-hidden\`, roles y navegaci√≥n por teclado
- **√Årea t√°ctil**: M√≠nimo 44px en m√≥viles para iconos clickeables
- **Focus management**: Estados heredados y mejorados del √°tomo Select
- **Screen reader**: Descripciones contextuales completas

## üé≠ Herencia del √°tomo Select

TextSelect hereda autom√°ticamente todas las mejoras del √°tomo Select:
- ‚úÖ Variantes sem√°nticas (error, success, warning)
- ‚úÖ Border radius personalizable
- ‚úÖ Estados hover/focus mejorados
- ‚úÖ Responsive con √°rea t√°ctil
- ‚úÖ Validaci√≥n HTML5 
- ‚úÖ Modo oscuro autom√°tico
- ‚úÖ Flecha personalizada con animaciones
        `
      }
    }
  },
  argTypes: {
    options: {
      name: 'Opciones',
      description: 'Array de opciones para el select',
      control: 'object',
      table: {
        type: { summary: 'Array<{value: string, label: string, disabled?: boolean}>' }
      }
    },
    placeholder: {
      name: 'Placeholder',
      description: 'Texto mostrado cuando no hay selecci√≥n',
      control: 'text',
      table: {
        type: { summary: 'string' },
        defaultValue: { summary: "'Selecciona una opci√≥n'" }
      }
    },
    value: {
      name: 'Valor',
      description: 'Valor controlado del select',
      control: 'text',
      table: {
        type: { summary: 'string' }
      }
    },
    size: {
      name: 'Tama√±o',
      description: 'Tama√±o del select (heredado del √°tomo Select con responsive)',
      control: 'select',
      options: ['xs', 'sm', 'md', 'lg', 'xl'],
      table: {
        type: { summary: 'string' },
        defaultValue: { summary: "'md'" }
      }
    },
    variant: {
      name: 'Variante',
      description: 'Estilo visual del select (usando las variantes del √°tomo Select mejorado)',
      control: 'select',
      options: ['default', 'success', 'warning', 'error'],
      table: {
        type: { summary: 'string' },
        defaultValue: { summary: "'default'" }
      }
    },
    rounded: {
      name: 'Radio de bordes',
      description: 'Curvatura de las esquinas (heredado del √°tomo Select mejorado)',
      control: 'select',
      options: ['sm', 'md', 'lg', 'xl', 'full'],
      table: {
        type: { summary: 'string' },
        defaultValue: { summary: "'md'" }
      }
    },
    label: {
      name: 'Etiqueta',
      description: 'Etiqueta descriptiva del campo (a√±adida por TextSelect)',
      control: 'text',
      table: {
        type: { summary: 'string' }
      }
    },
    helperText: {
      name: 'Texto de ayuda',
      description: 'Texto informativo debajo del select (a√±adido por TextSelect)',
      control: 'text',
      table: {
        type: { summary: 'string' }
      }
    },
    errorText: {
      name: 'Mensaje de error',
      description: 'Mensaje de error con live regions (sobrescribe helperText y variant)',
      control: 'text',
      table: {
        type: { summary: 'string' }
      }
    },
    leftIcon: {
      name: 'Icono izquierdo',
      description: 'Icono a la izquierda del campo (emoji, clase CSS o componente React)',
      control: 'text',
      table: {
        type: { summary: 'string | React.ReactNode' }
      }
    },
    disabled: {
      name: 'Deshabilitado',
      description: 'Si el campo est√° deshabilitado',
      control: 'boolean',
      table: {
        type: { summary: 'boolean' },
        defaultValue: { summary: 'false' }
      }
    },
    required: {
      name: 'Requerido',
      description: 'Si el campo es obligatorio',
      control: 'boolean',
      table: {
        type: { summary: 'boolean' },
        defaultValue: { summary: 'false' }
      }
    },
    fullWidth: {
      name: 'Ancho completo',
      description: 'Si ocupa todo el ancho disponible',
      control: 'boolean',
      table: {
        type: { summary: 'boolean' },
        defaultValue: { summary: 'false' }
      }
    }
  }
};

// ========== DATOS DE EJEMPLO ==========
const countries = [
  { value: 'mx', label: 'M√©xico' },
  { value: 'us', label: 'Estados Unidos' },
  { value: 'ca', label: 'Canad√°' },
  { value: 'br', label: 'Brasil' },
  { value: 'ar', label: 'Argentina' },
  { value: 'es', label: 'Espa√±a' },
  { value: 'fr', label: 'Francia' },
  { value: 'de', label: 'Alemania' },
  { value: 'it', label: 'Italia' },
  { value: 'jp', label: 'Jap√≥n' },
  { value: 'cn', label: 'China', disabled: true },
  { value: 'in', label: 'India' }
];

const categories = [
  { value: 'tech', label: 'Tecnolog√≠a' },
  { value: 'design', label: 'Dise√±o' },
  { value: 'marketing', label: 'Marketing' },
  { value: 'finance', label: 'Finanzas' },
  { value: 'hr', label: 'Recursos Humanos' },
  { value: 'sales', label: 'Ventas' }
];

const priorities = [
  { value: 'low', label: 'Baja' },
  { value: 'medium', label: 'Media' },
  { value: 'high', label: 'Alta' },
  { value: 'urgent', label: 'Urgente' }
];

// ========== ESTADOS B√ÅSICOS ==========
export const Default = {
  args: {
    options: countries,
    placeholder: "Selecciona tu pa√≠s",
    label: "Pa√≠s de residencia",
    helperText: "Selecciona tu pa√≠s para personalizar la experiencia"
  }
};

export const WithValue = {
  args: {
    options: categories,
    value: "design",
    label: "Categor√≠a",
    placeholder: "Selecciona una categor√≠a"
  }
};

export const Required = {
  args: {
    options: priorities,
    label: "Prioridad",
    placeholder: "Selecciona la prioridad",
    required: true,
    helperText: "Este campo es obligatorio"
  }
};

export const Disabled = {
  args: {
    options: countries,
    label: "Pa√≠s (Deshabilitado)",
    placeholder: "No disponible",
    disabled: true,
    helperText: "Esta opci√≥n no est√° disponible temporalmente"
  }
};

// ========== TAMA√ëOS ==========
export const Sizes = () => (
  <div style={{ display: 'flex', flexDirection: 'column', gap: 'var(--space-lg)' }}>
    <TextSelect options={categories} size="xs" label="Extra Small (XS)" placeholder="Tama√±o XS" />
    <TextSelect options={categories} size="sm" label="Small (SM)" placeholder="Tama√±o SM" />
    <TextSelect options={categories} size="md" label="Medium (MD)" placeholder="Tama√±o MD" />
    <TextSelect options={categories} size="lg" label="Large (LG)" placeholder="Tama√±o LG" />
    <TextSelect options={categories} size="xl" label="Extra Large (XL)" placeholder="Tama√±o XL" />
  </div>
);

// ========== VARIANTES ==========
export const Variants = () => (
  <div style={{ display: 'grid', gap: 'var(--space-lg)', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))' }}>
    <TextSelect 
      options={countries} 
      variant="default" 
      label="Default" 
      placeholder="Estado normal"
      helperText="Campo en estado normal"
    />
    <TextSelect 
      options={countries} 
      variant="success" 
      label="Success" 
      placeholder="Estado exitoso"
      helperText="Campo validado correctamente"
    />
    <TextSelect 
      options={countries} 
      variant="warning" 
      label="Warning" 
      placeholder="Estado de advertencia"
      helperText="Revisa tu selecci√≥n"
    />
    <TextSelect 
      options={countries} 
      variant="error" 
      label="Error" 
      placeholder="Estado de error"
      errorText="Debes seleccionar una opci√≥n v√°lida"
    />
  </div>
);

// ========== BORDER RADIUS ==========
export const BorderRadius = () => (
  <div style={{ display: 'grid', gap: 'var(--space-lg)', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))' }}>
    <TextSelect options={categories} rounded="sm" label="Small" placeholder="Border radius peque√±o" />
    <TextSelect options={categories} rounded="md" label="Medium" placeholder="Border radius medio" />
    <TextSelect options={categories} rounded="lg" label="Large" placeholder="Border radius grande" />
    <TextSelect options={categories} rounded="xl" label="Extra Large" placeholder="Border radius extra grande" />
    <TextSelect options={categories} rounded="full" label="Full" placeholder="Border radius completo" />
  </div>
);

// ========== CON ICONOS ==========
export const WithIcons = () => (
  <div style={{ display: 'grid', gap: 'var(--space-lg)', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))' }}>
    <TextSelect 
      options={countries}
      label="Pa√≠s de residencia"
      placeholder="Selecciona tu pa√≠s"
      leftIcon="üåç"
      helperText="Icono emoji decorativo"
    />
    <TextSelect 
      options={categories}
      label="Categor√≠a profesional"
      placeholder="Selecciona tu √°rea"
      leftIcon="üíº"
      helperText="Icono con informaci√≥n contextual"
    />
    <TextSelect 
      options={priorities}
      label="Nivel de prioridad"
      placeholder="Selecciona la prioridad"
      leftIcon="‚ö°"
      helperText="Icono que refuerza el significado"
    />
  </div>
);

// ========== ICONOS CLICKEABLES ==========
export const ClickableIcons = () => {
  const [showCountryInfo, setShowCountryInfo] = useState(false);
  
  return (
    <div style={{ display: 'flex', flexDirection: 'column', gap: 'var(--space-lg)' }}>
      <TextSelect 
        options={countries}
        label="Pa√≠s con informaci√≥n"
        placeholder="Selecciona tu pa√≠s"
        leftIcon="‚ÑπÔ∏è"
        onLeftIconClick={() => setShowCountryInfo(!showCountryInfo)}
        helperText="Haz clic en el icono para m√°s informaci√≥n"
      />
      
      {showCountryInfo && (
        <div style={{ 
          padding: 'var(--space-md)', 
          backgroundColor: 'var(--color-primary-light)', 
          borderRadius: 'var(--radius-md)',
          color: 'var(--text-primary)'
        }}>
          üí° <strong>Informaci√≥n:</strong> Selecciona tu pa√≠s para personalizar la experiencia y obtener contenido relevante para tu regi√≥n.
        </div>
      )}
    </div>
  );
};

// ========== VALIDACI√ìN AVANZADA ==========
export const ValidationExample = () => {
  const [formData, setFormData] = useState({
    country: '',
    category: '',
    priority: ''
  });
  const [errors, setErrors] = useState({});

  const validateField = (name, value) => {
    const newErrors = { ...errors };
    
    if (!value) {
      newErrors[name] = 'Este campo es obligatorio';
    } else {
      delete newErrors[name];
    }
    
    setErrors(newErrors);
  };

  const handleChange = (name) => (e) => {
    const value = e.target.value;
    setFormData(prev => ({ ...prev, [name]: value }));
    validateField(name, value);
  };

  return (
    <div style={{ display: 'flex', flexDirection: 'column', gap: 'var(--space-lg)', maxWidth: '400px' }}>
      <h3 style={{ color: 'var(--text-primary)' }}>Formulario con Validaci√≥n</h3>
      
      <TextSelect 
        options={countries}
        label="Pa√≠s de residencia"
        placeholder="Selecciona tu pa√≠s"
        value={formData.country}
        onChange={handleChange('country')}
        required
        errorText={errors.country}
        helperText={!errors.country ? "Selecciona tu pa√≠s" : undefined}
        leftIcon="üåç"
        variant={errors.country ? 'error' : formData.country ? 'success' : 'default'}
      />
      
      <TextSelect 
        options={categories}
        label="√Årea profesional"
        placeholder="Selecciona tu √°rea"
        value={formData.category}
        onChange={handleChange('category')}
        required
        errorText={errors.category}
        helperText={!errors.category ? "Tu √°rea de especializaci√≥n" : undefined}
        leftIcon="üíº"
        variant={errors.category ? 'error' : formData.category ? 'success' : 'default'}
      />
      
      <TextSelect 
        options={priorities}
        label="Prioridad de contacto"
        placeholder="Selecciona la prioridad"
        value={formData.priority}
        onChange={handleChange('priority')}
        required
        errorText={errors.priority}
        helperText={!errors.priority ? "¬øQu√© tan urgente es?" : undefined}
        leftIcon="‚ö°"
        variant={errors.priority ? 'error' : formData.priority ? 'success' : 'default'}
      />
      
      <div style={{ 
        marginTop: 'var(--space-md)',
        padding: 'var(--space-md)',
        backgroundColor: 'var(--bg-secondary)',
        borderRadius: 'var(--radius-md)',
        fontSize: 'var(--font-size-sm)'
      }}>
        <strong>Datos del formulario:</strong>
        <pre style={{ marginTop: 'var(--space-xs)' }}>
          {JSON.stringify(formData, null, 2)}
        </pre>
      </div>
    </div>
  );
};

// ========== ACCESIBILIDAD ==========
export const AccessibilityExample = () => (
  <div style={{ display: 'flex', flexDirection: 'column', gap: 'var(--space-lg)', maxWidth: '500px' }}>
    <h3 style={{ color: 'var(--text-primary)' }}>Ejemplos de Accesibilidad</h3>
    
    <TextSelect 
      options={countries}
      label="Campo completamente accesible"
      placeholder="Navega con Tab + Enter/Space"
      helperText="Este campo es navegable por teclado y compatible con screen readers"
      leftIcon="‚ôø"
      ariaLabel="Selector de pa√≠s con soporte de accesibilidad completo"
    />
    
    <TextSelect 
      options={priorities}
      label="Campo con error accesible"
      placeholder="Error anunciado autom√°ticamente"
      errorText="Los errores se anuncian autom√°ticamente a los screen readers"
      leftIcon="üîä"
      required
    />
    
    <div style={{ 
      padding: 'var(--space-md)', 
      backgroundColor: 'var(--color-success-light)', 
      borderRadius: 'var(--radius-md)',
      fontSize: 'var(--font-size-sm)',
      color: 'var(--text-primary)'
    }}>
      <strong>‚úÖ Caracter√≠sticas de accesibilidad:</strong>
      <ul style={{ marginTop: 'var(--space-xs)', paddingLeft: 'var(--space-lg)' }}>
        <li>Labels asociados correctamente</li>
        <li>ARIA live regions para mensajes de error</li>
        <li>Navegaci√≥n por teclado completa</li>
        <li>√Årea t√°ctil m√≠nima de 44px en m√≥viles</li>
        <li>Descripciones contextuales para screen readers</li>
        <li>Estados focus visibles y contrastados</li>
      </ul>
    </div>
  </div>
);

// ========== RESPONSIVE ==========
export const ResponsiveExample = () => (
  <div style={{ display: 'flex', flexDirection: 'column', gap: 'var(--space-lg)' }}>
    <h3 style={{ color: 'var(--text-primary)' }}>Dise√±o Responsive</h3>
    
    <div style={{ display: 'grid', gap: 'var(--space-md)', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))' }}>
      <TextSelect 
        options={countries}
        label="M√≥vil optimizado"
        placeholder="√Årea t√°ctil 44px"
        size="sm"
        helperText="Optimizado para dispositivos m√≥viles"
        leftIcon="üì±"
      />
      
      <TextSelect 
        options={categories}
        label="Tablet y desktop"
        placeholder="Escalable seg√∫n pantalla"
        size="md"
        helperText="Se adapta al tama√±o de pantalla"
        leftIcon="üíª"
      />
      
      <TextSelect 
        options={priorities}
        label="Pantallas grandes"
        placeholder="M√°xima legibilidad"
        size="lg"
        helperText="Optimizado para pantallas grandes"
        leftIcon="üñ•Ô∏è"
      />
    </div>
    
    <div style={{ 
      padding: 'var(--space-md)', 
      backgroundColor: 'var(--color-primary-light)', 
      borderRadius: 'var(--radius-md)',
      fontSize: 'var(--font-size-sm)',
      color: 'var(--text-primary)'
    }}>
      <strong>üì± Caracter√≠sticas responsive:</strong>
      <ul style={{ marginTop: 'var(--space-xs)', paddingLeft: 'var(--space-lg)' }}>
        <li>√Årea t√°ctil m√≠nima de 44px en m√≥viles</li>
        <li>Tama√±os de fuente escalables</li>
        <li>Spacing adaptativo seg√∫n dispositivo</li>
        <li>Iconos con tama√±o t√°ctil apropiado</li>
        <li>Sin zoom autom√°tico en iOS</li>
      </ul>
    </div>
  </div>
);

// ========== FORMULARIO COMPLETO ==========
export const CompleteFormExample = () => {
  const [formData, setFormData] = useState({
    country: '',
    category: '',
    priority: '',
    department: '',
    experience: ''
  });

  const departments = [
    { value: 'engineering', label: 'Ingenier√≠a' },
    { value: 'design', label: 'Dise√±o' },
    { value: 'product', label: 'Producto' },
    { value: 'marketing', label: 'Marketing' },
    { value: 'sales', label: 'Ventas' },
    { value: 'support', label: 'Soporte' }
  ];

  const experienceLevels = [
    { value: 'junior', label: 'Junior (0-2 a√±os)' },
    { value: 'mid', label: 'Mid-level (2-5 a√±os)' },
    { value: 'senior', label: 'Senior (5-8 a√±os)' },
    { value: 'lead', label: 'Lead (8+ a√±os)' },
    { value: 'director', label: 'Director/VP' }
  ];

  const handleChange = (field) => (e) => {
    setFormData(prev => ({ ...prev, [field]: e.target.value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    alert('Formulario enviado:\n' + JSON.stringify(formData, null, 2));
  };

  return (
    <form onSubmit={handleSubmit} style={{ 
      display: 'flex', 
      flexDirection: 'column', 
      gap: 'var(--space-lg)', 
      maxWidth: '600px',
      padding: 'var(--space-lg)',
      backgroundColor: 'var(--bg-secondary)',
      borderRadius: 'var(--radius-lg)'
    }}>
      <h3 style={{ color: 'var(--text-primary)', margin: 0 }}>
        Perfil Profesional Completo
      </h3>
      
      <div style={{ display: 'grid', gap: 'var(--space-md)', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))' }}>
        <TextSelect 
          options={countries}
          label="Pa√≠s de residencia"
          placeholder="Selecciona tu pa√≠s"
          value={formData.country}
          onChange={handleChange('country')}
          required
          leftIcon="üåç"
          helperText="Tu ubicaci√≥n principal"
          variant={formData.country ? 'success' : 'default'}
        />
        
        <TextSelect 
          options={categories}
          label="√Årea profesional"
          placeholder="Tu especializaci√≥n"
          value={formData.category}
          onChange={handleChange('category')}
          required
          leftIcon="üíº"
          helperText="Tu √°rea de expertiz"
          variant={formData.category ? 'success' : 'default'}
        />
      </div>
      
      <div style={{ display: 'grid', gap: 'var(--space-md)', gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))' }}>
        <TextSelect 
          options={departments}
          label="Departamento"
          placeholder="Selecciona departamento"
          value={formData.department}
          onChange={handleChange('department')}
          leftIcon="üè¢"
          helperText="Tu departamento actual"
          variant={formData.department ? 'success' : 'default'}
        />
        
        <TextSelect 
          options={experienceLevels}
          label="Nivel de experiencia"
          placeholder="Tu nivel actual"
          value={formData.experience}
          onChange={handleChange('experience')}
          leftIcon="üìà"
          helperText="A√±os de experiencia"
          variant={formData.experience ? 'success' : 'default'}
        />
        
        <TextSelect 
          options={priorities}
          label="Prioridad de contacto"
          placeholder="Selecciona prioridad"
          value={formData.priority}
          onChange={handleChange('priority')}
          leftIcon="‚ö°"
          helperText="¬øQu√© tan urgente?"
          variant={formData.priority ? 'success' : 'default'}
        />
      </div>
      
      <button 
        type="submit"
        style={{
          padding: 'var(--space-md) var(--space-lg)',
          backgroundColor: 'var(--color-primary)',
          color: 'var(--text-white)',
          border: 'none',
          borderRadius: 'var(--radius-md)',
          fontSize: 'var(--font-size-base)',
          fontWeight: 'var(--font-weight-semibold)',
          cursor: 'pointer',
          transition: 'all var(--transition-normal)',
          marginTop: 'var(--space-md)'
        }}
        onMouseOver={(e) => e.target.style.backgroundColor = 'var(--color-primary-hover)'}
        onMouseOut={(e) => e.target.style.backgroundColor = 'var(--color-primary)'}
      >
        Enviar Informaci√≥n üöÄ
      </button>
      
      {Object.values(formData).some(value => value) && (
        <div style={{ 
          marginTop: 'var(--space-md)',
          padding: 'var(--space-md)',
          backgroundColor: 'var(--bg-primary)',
          borderRadius: 'var(--radius-md)',
          fontSize: 'var(--font-size-sm)'
        }}>
          <strong style={{ color: 'var(--text-primary)' }}>Vista previa del perfil:</strong>
          <pre style={{ 
            marginTop: 'var(--space-xs)', 
            color: 'var(--text-secondary)',
            overflow: 'auto'
          }}>
            {JSON.stringify(formData, null, 2)}
          </pre>
        </div>
      )}
    </form>
  );
};

// ========== INTEGRACI√ìN CON OTROS COMPONENTES ==========
export const IntegrationExample = () => {
  const [showAdvanced, setShowAdvanced] = useState(false);
  const [selectedCountry, setSelectedCountry] = useState('');
  
  return (
    <div style={{ display: 'flex', flexDirection: 'column', gap: 'var(--space-lg)', maxWidth: '500px' }}>
      <h3 style={{ color: 'var(--text-primary)' }}>Integraci√≥n con Otros Componentes</h3>
      
      <TextSelect 
        options={countries}
        label="Selecciona tu pa√≠s"
        placeholder="Elige un pa√≠s"
        value={selectedCountry}
        onChange={(e) => setSelectedCountry(e.target.value)}
        leftIcon="üåç"
        helperText="Esto activar√° opciones adicionales"
      />
      
      {selectedCountry && (
        <div style={{ 
          padding: 'var(--space-md)', 
          backgroundColor: 'var(--color-success-light)', 
          borderRadius: 'var(--radius-md)',
          color: 'var(--text-primary)'
        }}>
          ‚úÖ Pa√≠s seleccionado: <strong>{countries.find(c => c.value === selectedCountry)?.label}</strong>
        </div>
      )}
      
      <label style={{ 
        display: 'flex', 
        alignItems: 'center', 
        gap: 'var(--space-sm)',
        color: 'var(--text-primary)',
        cursor: 'pointer'
      }}>
        <input 
          type="checkbox" 
          checked={showAdvanced}
          onChange={(e) => setShowAdvanced(e.target.checked)}
          style={{ transform: 'scale(1.2)' }}
        />
        Mostrar opciones avanzadas
      </label>
      
      {showAdvanced && (
        <div style={{ 
          display: 'flex', 
          flexDirection: 'column', 
          gap: 'var(--space-md)',
          padding: 'var(--space-md)',
          backgroundColor: 'var(--bg-secondary)',
          borderRadius: 'var(--radius-md)',
          border: '0.1rem dashed var(--border-primary)'
        }}>
          <TextSelect 
            options={categories}
            label="Categor√≠a avanzada"
            placeholder="Opciones adicionales"
            leftIcon="‚öôÔ∏è"
            size="sm"
          />
          
          <TextSelect 
            options={priorities}
            label="Configuraci√≥n especial"
            placeholder="Configuraci√≥n experta"
            leftIcon="üîß"
            size="sm"
            variant="warning"
            helperText="Solo para usuarios avanzados"
          />
        </div>
      )}
      
      <div style={{ 
        padding: 'var(--space-md)', 
        backgroundColor: 'var(--color-primary-light)', 
        borderRadius: 'var(--radius-md)',
        fontSize: 'var(--font-size-sm)',
        color: 'var(--text-primary)'
      }}>
        <strong>üß© Caracter√≠sticas de integraci√≥n:</strong>
        <ul style={{ marginTop: 'var(--space-xs)', paddingLeft: 'var(--space-lg)' }}>
          <li>Compatible con formularios controlados y no controlados</li>
          <li>Se integra perfectamente con librer√≠as como React Hook Form</li>
          <li>Callbacks personalizables para interacciones complejas</li>
          <li>Estado sincronizable con otros componentes</li>
          <li>Estilos consistentes con todo el sistema de dise√±o</li>
        </ul>
      </div>
    </div>
  );
};

CompleteFormExample.parameters = {
  docs: {
    description: {
      story: 'Ejemplo completo de un formulario profesional usando m√∫ltiples TextSelect con validaci√≥n visual y datos reales.'
    }
  }
};

IntegrationExample.parameters = {
  docs: {
    description: {
      story: 'Ejemplo de integraci√≥n con otros componentes, mostrando interacciones din√°micas y estado compartido.'
    }
  }
};